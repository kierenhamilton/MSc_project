// Initialization
00000000000000000101001100010111  // lui x10, 0x00000 (x10=0)
00010010001101000110010100110111  // lui x10, 0x12346 (x10=0x12346000)
00000111100001010000010100010011  // addi x10,x10,0x78 (x10=0x12345678)
10101011110011011110010110110111  // lui x11,0xABCDE (x11=0xABCDE000)
00000000000101011000010110010011  // addi x11,x11,1 (x11=0xABCDEF01)
00000000000000000000011000010011  // addi x12,x0,0 (x12=0)

// Arithmetic tests
00000000101101010000011010110011  // add x13,x10,x11 (x13=0x12345678+0xABCDEF01)
01000000101101011000011100110011  // sub x14,x11,x10 (x14=0xABCDEF01-0x12345678)
00000000101101011111011110110011  // and x15,x11,x10 (x15=0x12345678&0xABCDEF01)
00000000101101011110100000110011  // or x16,x11,x10 (x16=0x12345678|0xABCDEF01)
00000000101101011100100010110011  // xor x17,x11,x10 (x17=0x12345678^0xABCDEF01)

// Branch test (infinite loop if registers correct)
11111011101101010001010001100011  // bne x10,x11,_start (-12 offset)
